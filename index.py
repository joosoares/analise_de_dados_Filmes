import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from io import BytesIO
from fpdf import FPDF

# Configura√ß√£o visual
df = None
sns.set_theme(style="whitegrid", palette="pastel")
st.set_page_config(page_title="An√°lises Visuais de Filmes", layout="wide")

# T√≠tulo principal
st.title("\U0001F3AC An√°lises Visuais de Filmes")
st.markdown("---")

# Carregar dados
arquivo_excel = "C:/Users/famil/Desktop/Trabalho A3/Analise_de_30_Filmes.xlsx"
df = pd.read_excel(arquivo_excel)

# Filtros laterais
st.sidebar.header("\U0001F50D Filtros")
filtro_genero = st.sidebar.selectbox("\U0001F39EÔ∏è G√™nero:", ["Sem Filtro"] + sorted(df['G√™nero(s)'].dropna().unique()))
filtro_ano = st.sidebar.selectbox("üìÖ Ano m√≠nimo:", ["Sem Filtro"] + sorted(df['Ano de Lan√ßamento'].dropna().unique()))

# Aplicar filtros
df_filtrado = df.copy()
if filtro_genero != "Sem Filtro":
    df_filtrado = df_filtrado[df_filtrado['G√™nero(s)'].str.contains(filtro_genero, na=False)]
if filtro_ano != "Sem Filtro":
    df_filtrado = df_filtrado[df_filtrado['Ano de Lan√ßamento'] >= int(filtro_ano)]

# Gr√°ficos em colunas
col1, col2 = st.columns(2)

with col1:
    st.subheader("‚≠ê Distribui√ß√£o de Notas IMDb")
    fig1, ax1 = plt.subplots(figsize=(6, 4))
    sns.histplot(df_filtrado['Nota IMDb'].dropna(), bins=10, kde=True, color='steelblue', ax=ax1)
    ax1.set_xlabel('Nota IMDb')
    ax1.set_ylabel('Frequ√™ncia')
    st.pyplot(fig1)

with col2:
    st.subheader("üé≠ Quantidade de Filmes por G√™nero")
    fig2, ax2 = plt.subplots(figsize=(6, 4))
    df_filtrado['G√™nero(s)'].value_counts().plot(kind='bar', color='coral', ax=ax2)
    ax2.set_xlabel('G√™nero')
    ax2.set_ylabel('Quantidade')
    st.pyplot(fig2)

with st.expander("üí∏ Or√ßamento vs Bilheteria"):
    fig3, ax3 = plt.subplots(figsize=(10, 6))
    df_plot = df_filtrado.dropna(subset=['Or√ßamento (USD)', 'Bilheteria Mundial (USD)', 'Nota IMDb'])
    sns.scatterplot(
        data=df_plot,
        x='Or√ßamento (USD)',
        y='Bilheteria Mundial (USD)',
        hue='Nota IMDb',
        palette="cool",
        ax=ax3
    )
    ax3.set_title('Or√ßamento vs Bilheteria Mundial')
    ax3.set_xlabel('Or√ßamento (USD)')
    ax3.set_ylabel('Bilheteria Mundial (USD)')
    st.pyplot(fig3)

with st.expander("üçÖ Rotten Tomatoes: P√∫blico vs Cr√≠tica"):
    fig4, ax4 = plt.subplots(figsize=(10, 6))
    df_rt = df_filtrado.dropna(subset=['Nota Rotten Tomatoes (Cr√≠tica)', 'Nota Rotten Tomatoes (P√∫blico)'])
    sns.scatterplot(
        data=df_rt,
        x='Nota Rotten Tomatoes (Cr√≠tica)',
        y='Nota Rotten Tomatoes (P√∫blico)',
        color='purple',
        ax=ax4
    )
    ax4.set_title('RT: Cr√≠tica vs P√∫blico')
    ax4.set_xlabel('Nota RT Cr√≠tica')
    ax4.set_ylabel('Nota RT P√∫blico')
    st.pyplot(fig4)

with st.expander("‚è±Ô∏è Dura√ß√£o M√©dia por G√™nero"):
    fig5, ax5 = plt.subplots(figsize=(10, 6))
    df_filtrado.dropna(subset=['Dura√ß√£o (min)', 'G√™nero(s)']).groupby('G√™nero(s)')['Dura√ß√£o (min)'].mean().plot(kind='bar', color='limegreen', ax=ax5)
    ax5.set_title('Dura√ß√£o M√©dia por G√™nero')
    ax5.set_xlabel('G√™nero')
    ax5.set_ylabel('Dura√ß√£o M√©dia (min)')
    st.pyplot(fig5)

with st.expander("üìà Filmes por Ano de Lan√ßamento"):
    fig6, ax6 = plt.subplots(figsize=(10, 6))
    df_filtrado['Ano de Lan√ßamento'].dropna().value_counts().sort_index().plot(kind='line', color='dodgerblue', ax=ax6)
    ax6.set_title('N√∫mero de Filmes por Ano')
    ax6.set_xlabel('Ano de Lan√ßamento')
    ax6.set_ylabel('Quantidade de Filmes')
    st.pyplot(fig6)

# Classe PDF
class PDF(FPDF):
    def header(self):
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "An√°lise de Desempenho de Bilheteria", 0, 1, "C")

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, f"P√°gina {self.page_no()}", 0, 0, "C")

# Fun√ß√µes para relat√≥rio
def gerar_relatorio_pdf(df, categoria, ano):
    pdf = PDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(0, 10, f"Categoria: {categoria}", ln=True)
    pdf.cell(0, 10, f"Ano: {ano}", ln=True)
    pdf.cell(0, 10, f"Bilheteria Total Estimada: {df['Bilheteria Mundial (USD)'].sum():,.2f} USD", ln=True)
    pdf.ln(10)

    texto = (
        "Este resultado reflete o comportamento do p√∫blico em rela√ß√£o aos t√≠tulos lan√ßados nesse per√≠odo, \n"
        "considerando fatores como recep√ß√£o cr√≠tica, estrat√©gias de marketing, distribui√ß√£o e tend√™ncias do \n"
        "mercado cinematogr√°fico.\n\n"
        "A an√°lise contribui para a compreens√£o do impacto comercial da categoria no ano em quest√£o, \n"
        "servindo como refer√™ncia para estudos de mercado, proje√ß√µes futuras e estrat√©gias de produ√ß√£o e \n"
        "lan√ßamento de novos t√≠tulos."
    )
    pdf.multi_cell(0, 10, texto)

    buffer = BytesIO()
    buffer.write(pdf.output(dest='S').encode('latin1'))
    buffer.seek(0)
    return buffer

def gerar_relatorio_excel(df):
    buffer = BytesIO()
    df.to_excel(buffer, index=False, sheet_name="Relat√≥rio Filtrado")
    buffer.seek(0)
    return buffer

# Bot√µes de relat√≥rio
st.sidebar.header("üìÑ Gerar Relat√≥rios")
if st.sidebar.button("Gerar Relat√≥rio"):
    categoria = filtro_genero if filtro_genero != "Sem Filtro" else "Todos os G√™neros"
    ano = filtro_ano if filtro_ano != "Sem Filtro" else "Todos os Anos"

    pdf_buffer = gerar_relatorio_pdf(df_filtrado, categoria, ano)
    excel_buffer = gerar_relatorio_excel(df_filtrado)

    st.sidebar.download_button(
        label="üìÖ Baixar PDF",
        data=pdf_buffer,
        file_name="Relatorio_Filmes.pdf",
        mime="application/pdf"
    )
    st.sidebar.download_button(
        label="üìä Baixar Excel",
        data=excel_buffer,
        file_name="Relatorio_Filmes.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# Rodap√©
st.markdown("---")
st.markdown(
    "<p style='text-align: center; color: gray;'>Desenvolvido por Grupo 6 ‚Ä¢ Trabalho A3</p>",
    unsafe_allow_html=True
)
